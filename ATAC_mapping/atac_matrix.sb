#!/bin/bash --login
#SBATCH --nodes=8
#SBATCH --ntasks-per-node=6
#SBATCH --cpus-per-task=4
#SBATCH --mem=96GB
#SBATCH --time=03:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=zhouzeh2@msu.edu
#SBATCH --output=/mnt/research/FishEvoDevoGeno/raw_reads_4_tony/ATAC_peaks/out/%x-%j.SLURMout
echo “This script is to test Genrich.”
# Purge current modules and load required ones
module purge
module load SAMtools/1.18-GCC-12.3.0
module load picard/2.25.1-Java-11

module load BEDTools/2.31.0-GCC-12.3.0
module load parallel 
#module load R/4.3.0-GCC-12.3.0

cd /mnt/research/FishEvoDevoGeno/raw_reads_4_tony/ATAC_peaks/ncOCR_narrow_peaks
# Run parallel Jaccard calculations
parallel --joblog jaccard.log \
  "bedtools jaccard -a {1} -b {2} | awk 'NR>1' | cut -f 3 > {1}.{2}.jaccard" \
  ::: *.bed ::: *.bed

# 1. Generate proper 3-column format
find . -name "*.jaccard" -exec grep -H "." {} \; | \
  sed -e 's|^\./||' \
      -e 's/\.bed\./\t/g' \
      -e 's/\.jaccard:/\t/' \
  > pairwise.fixed.txt

# 2. Clean names and keep scores
awk 'BEGIN{OFS="\t"} {
    split($1, a, /\.bed/); 
    split($2, b, /\.bed/);
    gsub(/_sorted_no_mito.*/, "", a[1]);
    gsub(/_sorted_no_mito.*/, "", b[1]);
    print a[1], b[1], $3
}' pairwise.fixed.txt > pairwise.shortnames.txt

# 3. Generate matrix
awk 'NF==3' pairwise.shortnames.txt | \
  python /mnt/research/FishEvoDevoGeno/raw_reads_4_tony/script/ATAC_mapping/make-matrix.py > jaccard.matrix

# 4. Create labels (keeping the full names)
cut -f1 jaccard.matrix > labels.txt

# 5. Run R script for PCA
Rscript --vanilla <<EOF
# Load libraries
library(ggplot2)
library(RColorBrewer)

# Read data
x <- as.matrix(read.table('jaccard.matrix'))
labels <- read.table('labels.txt')[, 1]

# Replace NA with 0 (if needed)
x[is.na(x)] <- 0

# PCA
pca <- prcomp(x, scale. = TRUE)  # prcomp is preferred over princomp

# Plot
pdf("PCA_plot.pdf", width=8, height=6)
ggplot(data.frame(PC1=pca\$x[,1], PC2=pca\$x[,2], Group=labels), aes(PC1, PC2, color=Group)) +
  geom_point(size=3) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(length(unique(labels)))) +
  labs(title="PCA of ATAC-seq Peak Similarity (Jaccard Index)") +
  theme_minimal()
dev.off()

# Save PCA results
write.table(pca\$x, file="PCA_scores.txt", quote=FALSE, sep="\t")
EOF

echo "Analysis complete. Results saved to PCA_plot.pdf and PCA_scores.txt."