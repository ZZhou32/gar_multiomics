#!/bin/bash --login
#SBATCH --nodes=8
#SBATCH --ntasks-per-node=6
#SBATCH --cpus-per-task=4
#SBATCH --mem=96GB
#SBATCH --time=03:00:00
#SBATCH --mail-type=ALL
#SBATCH --mail-user=zhouzeh2@msu.edu
#SBATCH --output=/mnt/research/FishEvoDevoGeno/raw_reads_4_tony/ATAC_peaks/out/%x-%j.SLURMout

module purge
module load R/4.4.1-gfbf-2023b

# Set absolute path to working directory
WORKDIR="/mnt/research/FishEvoDevoGeno/raw_reads_4_tony/ATAC_peaks/narrowPeaks_raw"
cd "$WORKDIR" || { echo "Failed to change directory to $WORKDIR"; exit 1; }

# Debug: Show current directory and files
echo "Current directory: $(pwd)"
echo "Files in directory:"
ls -lh

# Run R script with full file paths
Rscript --vanilla <<'EOF'
# Load libraries
library(ggplot2)
library(RColorBrewer)

# Define file paths with full directory path
matrix_file <- "/mnt/research/FishEvoDevoGeno/raw_reads_4_tony/ATAC_peaks/narrowPeaks_raw/jaccard.matrix"
labels_file <- "/mnt/research/FishEvoDevoGeno/raw_reads_4_tony/ATAC_peaks/narrowPeaks_raw/labels.txt"

# Verify files exist
if(!file.exists(matrix_file)) stop("File not found: ", matrix_file)
if(!file.exists(labels_file)) stop("File not found: ", labels_file)

# Read data
cat("Reading matrix from:", matrix_file, "\n")
x <- as.matrix(read.table(matrix_file))
cat("Matrix dimensions:", dim(x), "\n")

cat("Reading labels from:", labels_file, "\n")
labels <- read.table(labels_file)[, 1]
cat("Number of labels:", length(labels), "\n")

# Check dimensions match
if(length(labels) != nrow(x)) {
  stop("Number of labels (", length(labels), 
       ") doesn't match matrix rows (", nrow(x), ")")
}

# Replace NA with 0
x[is.na(x)] <- 0

# PCA
cat("Performing PCA...\n")
pca <- prcomp(x, scale. = TRUE)

# Plot
cat("Creating plot...\n")
pdf("PCA_plot.pdf", width=8, height=6)
print(ggplot(data.frame(PC1=pca$x[,1], PC2=pca$x[,2], Group=labels), 
             aes(PC1, PC2, color=Group)) +
  geom_point(size=3) +
  scale_color_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(length(unique(labels)))) +
  labs(title="PCA of ATAC-seq Peak Similarity (Jaccard Index)") +
  theme_minimal())
dev.off()

# Save PCA results
cat("Saving results...\n")
write.table(pca$x, file="PCA_scores.txt", quote=FALSE, sep="\t")

cat("R script completed successfully\n")
EOF

# Check if R script succeeded
if [ $? -eq 0 ]; then
  echo "Analysis complete."
else
  echo "ERROR: R script failed" >&2
  exit 1
fi